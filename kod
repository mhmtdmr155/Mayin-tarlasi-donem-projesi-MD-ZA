#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define N 10 // Oyun tahtasının boyutu

// Oyun tahtası için bir matris tanımlayalım
char tahta[N][N];

// Oyuncu için bir konum tanımlayalım
int oyuncuX = 0;
int oyuncuY = 0;

// Mayın sayısı için bir değişken tanımlayalım
int mayinSayisi = 0;

// Hamleler için yönlendirme dizileri
int hamleX[] = {-1, 0, 1, 0}; // Yukarı, Sağa, Aşağı, Sola
int hamleY[] = {0, 1, 0, -1};

// Fonksiyon prototipleri
void mayinleriYerlestir();
void oyunTahtasiniYazdir();
int kullaniciHamleAl();
int oyunBitti();

int main() {
    // Oyun tahtasını temizleyelim
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            tahta[i][j] = ' ';
        }
    }

    // Oyuncu başlangıç konumunu ayarlayalım
    oyuncuX = 0;
    oyuncuY = 0;

    // Mayın sayısını hesaplayalım
    mayinSayisi = (N * N) * 0.1;

    // Mayınları tahtaya yerleştirelim
    mayinleriYerlestir();

    // Oyun devam ederken döngüyü çalıştıralım
    oyunDevamEt();

    return 0;
}

void mayinleriYerlestir() {
    // Mayınları yerleştirmek için bir döngü kullanalım
    for (int i = 0; i < mayinSayisi; i++) {
        // Rastgele bir konum üretelim
        int x = rand() % N;
        int y = rand() % N;

        // Bu konuma daha önce mayın yerleştirilmiş mi kontrol edelim
        if (tahta[x][y] != 'o') {
            // Mayını yerleştirelim
            tahta[x][y] = 'o';
        } else {
            // Mayın yerleştirilemedi, döngüyü bir kez daha çalıştıralım
            i--;
        }
    }
}

void oyunDevamEt() {
    // Oyun bitene kadar döngüye devam edelim
    while (1) {
        // Kullanıcıdan bir hamle isteyip yürütelim
        int hamle = kullaniciHamleAl();

        // Hamleyi kontrol edelim
        if (hamle == -1) {
            // Oyun bitti
            break;
        }

        // Hamleyi uygulayalım
        tahta[oyuncuX][oyuncuY] = hamle;

        // Oyuncu konumunu güncelleyelim
        oyuncuX = (oyuncuX + hamleX[hamle]) % N;
        oyuncuY = (oyuncuY + hamleY[hamle]) % N;

        // Oyun durumunu kontrol edelim
        if (oyunBitti()) {
            // Oyun bitti
            break;
        }

        // Oyun tahtasını ekrana bastıralım
        oyunTahtasiniYazdir();
    }
}

int kullaniciHamleAl() {
    // Kullanıcıdan bir yön tuşu isteyip döndürelim
    char hamle = getchar();

    // Hamleyi kontrol edelim
    switch (hamle) {
        case 'w':
            return 0; // Yukarı
        case 'd':
            return 1; // Sağa
        case 's':
            return 2; // Aşağı
        case 'a':
            return 3; // Sola
        default:
            return -1; // Geçersiz hamle
    }
}

int oyunBitti() {
    // Oyunun bitip bitmediğini kontrol et
    // Burada oyun bitme koşullarını belirleyerek kontrol edebilirsiniz.
    // Örneğin, belirli bir durumda return 1; yapabilirsiniz.
    // Şu an için her zaman devam eden bir oyun olarak düşünülmüş.
    return 0;
}

void oyunTahtasiniYazdir() {
    // Oyun tahtasını ekrana yazdır
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%c ", tahta[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}

